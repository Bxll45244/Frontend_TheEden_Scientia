import React, { useState, useEffect } from 'react';
import axios from 'axios';
import LoadingAnimation from '../animations/LoadingAnimation'; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

const API_BASE_URL = "http://localhost:5000/api"; // ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô props ‡∏°‡∏≤‡∏à‡∏≤‡∏Å GolferBookingPage

const Step3 = ({ bookingData, handleChange, onNext, onPrev, API_BASE_URL }) => {
    const { golfCartQty, golfBagQty, caddy, caddySelectionEnabled } = bookingData;
    const [caddySearchTerm, setCaddySearchTerm] = useState('');
    const [availableCaddies, setAvailableCaddies] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);

    useEffect(() => {
        const getCaddies = async () => {
            setIsLoading(true);
            setError(null);
            try {
                // *** ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á token ‡∏î‡πâ‡∏ß‡∏¢ JavaScript ‡πÅ‡∏•‡∏∞ Authorization Header ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ ***
                // const token = getCookie('jwt'); // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
                // if (!token) { // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
                //     setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡∏î‡∏î‡∏µ‡πâ'); // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
                //     setIsLoading(false); // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
                //     return; // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
                // } // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
                // const config = { // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
                //     headers: { // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
                //         'Authorization': `Bearer ${token}` // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
                //     } // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
                // }; // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å

                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏™‡πà‡∏á HttpOnly cookie ‡πÑ‡∏õ‡πÄ‡∏≠‡∏á
                const response = await axios.get(`${API_BASE_URL}/user/available-caddies`, {
                    withCredentials: true // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á HttpOnly cookie
                });
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (Array.isArray(response.data)) {
                    setAvailableCaddies(response.data);
                } else {
                    throw new Error('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡∏î‡∏î‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
                }
                
            } catch (err) {
                console.error("Failed to fetch caddies:", err.response?.data?.message || err.message);
                // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
                setError(err.response?.data?.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡∏î‡∏î‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
            } finally {
                setIsLoading(false);
            }
        };

        if (caddySelectionEnabled) {
            getCaddies();
        } else {
            // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ caddySelectionEnabled ‡πÄ‡∏õ‡πá‡∏ô false ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ caddies
            setAvailableCaddies([]);
            setError(null);
        }
    }, [caddySelectionEnabled, API_BASE_URL]); // ‡πÄ‡∏û‡∏¥‡πà‡∏° API_BASE_URL ‡πÉ‡∏ô dependency array

    const filteredCaddies = availableCaddies.filter(caddyOption =>
        caddyOption.name.toLowerCase().includes(caddySearchTerm.toLowerCase())
    );

    const handleCaddySelection = (caddyId) => {
        let updatedCaddies = [...caddy];
        if (updatedCaddies.includes(caddyId)) {
            updatedCaddies = updatedCaddies.filter(id => id !== caddyId);
        } else {
            // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Ñ‡∏î‡∏î‡∏µ‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
            if (updatedCaddies.length < bookingData.players) {
                updatedCaddies.push(caddyId);
            } else {
                setError(`‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Ñ‡∏î‡∏î‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${bookingData.players} ‡∏Ñ‡∏ô`);
                return;
            }
        }
        setError(null); // Clear error if selection is successful
        handleChange({ target: { name: 'caddy', value: updatedCaddies } });
    };

    return (
        <div className="p-4 bg-white rounded-lg shadow-md max-w-md mx-auto">
            <h2 className="text-xl font-semibold mb-4 text-center">Step 3: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°</h2>
            
            <div className="mb-4 text-center">
                <label className="block text-gray-700 text-sm font-bold mb-2">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÑ‡∏°‡πâ‡∏Å‡∏≠‡∏•‡πå‡∏ü:</label>
                <div className="flex items-center justify-center space-x-2">
                    <button
                        type="button"
                        className="bg-gray-200 text-gray-800 px-3 py-1 rounded-full text-lg"
                        onClick={() => handleChange({ target: { name: 'golfBagQty', value: Math.max(0, golfBagQty - 1) } })}
                    >
                        -
                    </button>
                    <span className="text-2xl font-bold">{golfBagQty}</span>
                    <button
                        type="button"
                        className="bg-gray-200 text-gray-800 px-3 py-1 rounded-full text-lg"
                        onClick={() => handleChange({ target: { name: 'golfBagQty', value: golfBagQty + 1 } })}
                    >
                        +
                    </button>
                </div>
                <p className="text-xs text-gray-500 mt-1">*‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÑ‡∏°‡πâ‡∏Å‡∏≠‡∏•‡πå‡∏ü/‡∏ó‡πà‡∏≤‡∏ô 300 ‡∏ö‡∏≤‡∏ó</p>
            </div>
            <div className="mb-4 text-center">
                <label className="block text-gray-700 text-sm font-bold mb-2">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ñ‡∏Å‡∏≠‡∏•‡πå‡∏ü:</label>
                <div className="flex items-center justify-center space-x-2">
                    <button
                        type="button"
                        className="bg-gray-200 text-gray-800 px-3 py-1 rounded-full text-lg"
                        onClick={() => handleChange({ target: { name: 'golfCartQty', value: Math.max(0, golfCartQty - 1) } })}
                    >
                        -
                    </button>
                    <span className="text-2xl font-bold">{golfCartQty}</span>
                    <button
                        type="button"
                        className="bg-gray-200 text-gray-800 px-3 py-1 rounded-full text-lg"
                        onClick={() => handleChange({ target: { name: 'golfCartQty', value: golfCartQty + 1 } })}
                    >
                        +
                    </button>
                </div>
                <p className="text-xs text-gray-500 mt-1">*‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡∏Å‡∏≠‡∏•‡πå‡∏ü/‡∏Ñ‡∏±‡∏ô 500 ‡∏ö‡∏≤‡∏ó</p>
            </div>
            <div className="mb-4 border-t pt-4">
                <div className="flex items-center mb-4">
                    <input
                        type="checkbox"
                        id="caddy-selection-toggle"
                        checked={caddySelectionEnabled}
                        onChange={() => {
                            // Clear selected caddies when disabling selection
                            if (caddySelectionEnabled) {
                                handleChange({ target: { name: 'caddy', value: [] } });
                            }
                            handleChange({ target: { name: 'caddySelectionEnabled', value: !caddySelectionEnabled } });
                            setError(null); // Clear error when toggling
                        }}
                        className="mr-2 h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
                    />
                    <label htmlFor="caddy-selection-toggle" className="text-gray-800 font-bold text-sm">
                        ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Ñ‡∏î‡∏î‡∏µ‡πâ
                    </label>
                </div>
                {caddySelectionEnabled && (
                    <div className="space-y-4">
                        <input
                            type="text"
                            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Ñ‡∏î‡∏î‡∏µ‡πâ..."
                            value={caddySearchTerm}
                            onChange={(e) => setCaddySearchTerm(e.target.value)}
                            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        />
                        {isLoading ? (
                            <div className="flex justify-center items-center">
                                <LoadingAnimation />
                            </div>
                        ) : error ? (
                            <p className="col-span-2 text-center text-red-500">{error}</p>
                        ) : (
                            <div className="grid grid-cols-2 gap-4">
                                {filteredCaddies.length > 0 ? (
                                    filteredCaddies.map(caddyOption => (
                                        <div
                                            key={caddyOption._id}
                                            className={`flex flex-col items-center p-2 rounded-lg cursor-pointer transition-colors duration-200 ${caddy.includes(caddyOption._id) ? 'bg-green-100 border-2 border-green-500' : 'bg-gray-100 border-2 border-transparent hover:bg-gray-200'}`}
                                            onClick={() => handleCaddySelection(caddyOption._id)}
                                        >
                                            <div className="relative w-20 h-20 rounded-full overflow-hidden mb-2">
                                                {/* ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ placeholder image ‡∏´‡∏≤‡∏Å caddyOption.profilePic ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
                                                <img 
                                                    src={caddyOption.profilePic || `https://placehold.co/80x80/cccccc/ffffff?text=Caddy`} 
                                                    alt={caddyOption.name} 
                                                    className="w-full h-full object-cover" 
                                                    onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/80x80/cccccc/ffffff?text=Caddy"; }}
                                                />
                                                {caddy.includes(caddyOption._id) && (
                                                    <div className="absolute inset-0 bg-green-500 bg-opacity-70 flex items-center justify-center rounded-full"> {/* ‡πÄ‡∏û‡∏¥‡πà‡∏° rounded-full */}
                                                        <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                                                        </svg>
                                                    </div>
                                                )}
                                            </div>
                                            <p className="text-sm font-semibold text-center">{caddyOption.name}</p>
                                        </div>
                                    ))
                                ) : (
                                    <p className="col-span-2 text-center text-gray-500">‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏Ñ‡∏î‡∏î‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</p>
                                )}
                            </div>
                        )}
                    </div>
                )}
                <p className="text-xs text-gray-500 mt-2">*‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏î‡∏î‡∏µ‡πâ/‡∏ó‡πà‡∏≤‡∏ô 400 ‡∏ö‡∏≤‡∏ó</p>
            </div>
            <div className="flex justify-between mt-6">
                <button onClick={onPrev} className="bg-gray-600 text-white px-6 py-2 rounded-full font-bold hover:bg-gray-700">‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
                <button onClick={onNext} className="bg-gray-800 text-white px-6 py-2 rounded-full font-bold hover:bg-gray-700">‡∏à‡∏≠‡∏á‡∏ï‡πà‡∏≠</button>
            </div>
        </div>
    );
};

export default Step3;
